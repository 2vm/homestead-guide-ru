################################################################################
REST API
################################################################################

Черновик команд API для работы с EGAAS.

Вызов команды происходит при обращении к **/api/v1/command/[param]**, где **command** - имя команды, **param** - дополнительный параметр, например, имя изменяемого или получаемого ресурса. Ответ сервера представлен в JSON формате.

Предлагается в каждои ответе возвращать параметр **error**, который пустой в случае успешного завершения или содержит текст ошибки.
*Нужно ли вводить дополнительные коды ответа кроме 200?*
Такие как Неправильный запрос (400), Нет прав доступа (401), Не найдено (404).
Кроме поля *error*, все команды, которые отправляют транзакции также возвращают поле **hash** с хэшем отправленной транзакции. Потом, по этому хэшу с помощью команды **txstatus** можно получить номер блока, в который запечаталась транзакция или ошибку обработки. 

На данный момент, при первом обращении сервер открывает сессию, для данного пользователя и возвращает ее в Cookie в gosessionid. Поэтому для текущей совместимости необходимо при каждом запросе дополнительно передавать это значение cookie. Например, **Cookie: gosessionid=34673476347834**. В дальнейшем возможен переход на JWT https://jwt.io/ 

********************************************************************************
Общие команды API
********************************************************************************

getuid
==============================
**GET** Возвращает уникальное значение, которое нужно подписать своим приватным ключом и отправить обратно серверу с помощью команды **auth**.

.. code:: 
    
    GET
    /api/v1/getuid
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "uid": "28726874268427424",
        "error": ""
    }

auth
==============================
**POST** Аутентификация пользователя. Предварительно необходимо вызвать команду **getuid** для получения уникального значения и подписать его. В случае успеха возвращается соответствующий адрес в формате XXXX-XXXX-...-XXX. 

.. code:: 
    
    POST
    /api/v1/auth
    pubkey: hex публичный ключ
    signature: hex подписанный uid
    state: идентификатор государства
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "address": "1234-....-3424",
        "error": ""
    }      

********************************************************************************
Команды API для работы с EGS
********************************************************************************

balance
==============================
**GET** Получить баланс EGS указанного кошелька. Номер кошелька указывается вторым параметром и может быть представлен в любом формате - int64, uint64, XXXX-...-XXXX. В параметре *amount* возвращается сумма в кошелька в qEGS, а в параметре *egs* - возвращается это же величина в EGS.

.. code:: 
    
    GET
    /api/v1/balance/1234-...-4673
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "amount": "123450000000000000000",
        "egs": "123.45"
        "error": ""
    }      

sendegs 
==============================
**POST** Отправить EGS с одного кошелька на другой. Перед вызовом данной команды необходимо отправить запрос **prepare/sendegs**, а затем, после подписывания возвращаемого параметра *forsign* обходимо отправить такой же запрос с полем *signature* в котором записана подпись. 

.. code:: 
    
    POST
    /api/v1/sendegs
    pubkey: hex публичный ключ
    recipient - адрес получателя
    amount - сумма перевода в qEGS
    commission - комиссия qEGS
    comment - комментарий
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634",
        "error": ""
    }      

********************************************************************************
Служебные команды API
********************************************************************************

prepare/{tx}
==============================
**POST/PUT** Отправляет запрос на получение строки для подписи указанной транзакции. В качестве **{tx}** необходимо указать имя транзакции для которой следует возвратить строку для подписи. В параметре forsign возвращается строка, которую необходимо будет подписать. Также возвращается параметр time, который нужно будет передать вместе с подписью. Метод отправки POST или PUT должен совпадать с методом, которым будет отправлена сама транзакция.

.. code:: 
    
    POST
    /api/v1/prepare/sendegs
    pubkey: hex публичный ключ
    recipient - адрес получателя
    amount - сумма перевода в qEGS
    commission - комиссия qEGS
    comment - комментарий
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "time": 423523768,
        "forsign": "......", 
        "error": ""
    }      

txstatus/{hash}
==============================
**GET** Возвращает номер блока или ошибку отправленной транзакции с данным хэшем. Если возвращаемые значения *blockid* и *error* пустые, значит транзакция еще не была запечатана в блок.

.. code:: 
    
    GET
    /api/v1/txstatus/2353467abcd7436ef47438
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "blockid": "423523768",
        "error": ""
    }      

********************************************************************************
Команды API для работы с контентом
********************************************************************************

menu/{name}/[global]
==============================
**GET** Получить поля указанного во втором параметре **{name}** меню. по умолчанию, возвращается меню для текущего государства. Если указать дополнительный параметр *global*, то будет возвращаться глобальное меню.

.. code:: 
    
    GET
    /api/v1/menu/government
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "name": "government",
        "value": "MenuItem()....", 
        "conditions": "MainCondition()",
        "error": ""
    }      

menu
==============================
**POST** Добавить новое меню. Предварительно нужно вызывать команду **prepare/menu** и подписывать возвращаемое поле forsign.

.. code:: 
    
    POST
    /api/v1/menu
    name - имя меню
    value - шаблон меню
    conditions - права на изменения
    global - укажите 1, если добавить глобальное меню. В противном случае, меню добавится в текущее государство.
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      



