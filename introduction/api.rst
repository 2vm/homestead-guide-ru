################################################################################
REST API
################################################################################

Черновик команд API для работы с EGAAS.

Вызов команды происходит при обращении к **/api/v1/command/[param]**, где **command** - имя команды, **param** - дополнительный параметр, например, имя изменяемого или получаемого ресурса. Ответ сервера представлен в JSON формате.

Предлагается в каждои ответе возвращать параметр **error**, который пустой в случае успешного завершения или содержит текст ошибки.
*Нужно ли вводить дополнительные коды ответа кроме 200?*
Такие как Неправильный запрос (400), Нет прав доступа (401), Не найдено (404).
Кроме поля *error*, все команды, которые отправляют транзакции также возвращают поле **hash** с хэшем отправленной транзакции. Потом, по этому хэшу с помощью команды **txstatus** можно получить номер блока, в который запечаталась транзакция или ошибку обработки. 

На данный момент, при первом обращении сервер открывает сессию, для данного пользователя и возвращает ее в Cookie в gosessionid. Поэтому для текущей совместимости необходимо при каждом запросе дополнительно передавать это значение cookie. Например, **Cookie: gosessionid=34673476347834**. В дальнейшем возможен переход на JWT https://jwt.io/ 

********************************************************************************
Общие команды API
********************************************************************************

getuid
==============================
**GET** Возвращает уникальное значение, которое нужно подписать своим приватным ключом и отправить обратно серверу с помощью команды **auth**.

.. code:: 
    
    GET
    /api/v1/getuid
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "uid": "28726874268427424",
        "error": ""
    }

auth
==============================
**POST** Аутентификация пользователя. Предварительно необходимо вызвать команду **getuid** для получения уникального значения и подписать его. В случае успеха возвращается соответствующий адрес в формате XXXX-XXXX-...-XXX. 

.. code:: 
    
    POST
    /api/v1/auth
    pubkey: hex публичный ключ
    signature: hex подписанный uid
    state: идентификатор государства
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "address": "1234-....-3424",
        "error": ""
    }      

********************************************************************************
Команды API для работы с EGS
********************************************************************************

balance
==============================
**GET** Получить баланс EGS указанного кошелька. Номер кошелька указывается вторым параметром и может быть представлен в любом формате - int64, uint64, XXXX-...-XXXX. В параметре *amount* возвращается сумма в кошелька в qEGS, а в параметре *egs* - возвращается это же величина в EGS.

.. code:: 
    
    GET
    /api/v1/balance/1234-...-4673
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "amount": "123450000000000000000",
        "egs": "123.45"
        "error": ""
    }      

sendegs 
==============================
**POST** Отправить EGS с одного кошелька на другой. Перед вызовом данной команды необходимо отправить запрос **prepare/sendegs**, а затем, после подписывания возвращаемого параметра *forsign* обходимо отправить такой же запрос с полем *signature* в котором записана подпись. 

.. code:: 
    
    POST
    /api/v1/sendegs
    pubkey: hex публичный ключ
    recipient - адрес получателя
    amount - сумма перевода в qEGS
    commission - комиссия qEGS
    comment - комментарий
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634",
        "error": ""
    }      

********************************************************************************
Служебные команды API
********************************************************************************

prepare/{tx}
==============================
**POST/PUT** Отправляет запрос на получение строки для подписи указанной транзакции. В качестве **{tx}** необходимо указать имя транзакции для которой следует возвратить строку для подписи. В параметре forsign возвращается строка, которую необходимо будет подписать. Также возвращается параметр time, который нужно будет передать вместе с подписью. Метод отправки POST или PUT должен совпадать с методом, которым будет отправлена сама транзакция.

.. code:: 
    
    POST
    /api/v1/prepare/sendegs
    pubkey: hex публичный ключ
    recipient - адрес получателя
    amount - сумма перевода в qEGS
    commission - комиссия qEGS
    comment - комментарий
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "time": 423523768,
        "forsign": "......", 
        "error": ""
    }      

txstatus/{hash}
==============================
**GET** Возвращает номер блока или ошибку отправленной транзакции с данным хэшем. Если возвращаемые значения *blockid* и *error* пустые, значит транзакция еще не была запечатана в блок.

.. code:: 
    
    GET
    /api/v1/txstatus/2353467abcd7436ef47438
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "blockid": "423523768",
        "error": ""
    }      

********************************************************************************
Команды API для работы с контентом
********************************************************************************

content/{menu|page}/{name}/[?global=1]
==============================
**GET** Возвращает HTML код указанной страницы или меню с именем **{name}**, который получается после обработки шаблонизатором.

.. code:: 
    
    GET
    /api/v1/content/page/default
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "html": "......",
        "error": ""
    }      


menu/{name}/[?global=1]
==============================
**GET** Получить поля указанного во втором параметре **{name}** меню. по умолчанию, возвращается меню для текущего государства. Если указать дополнительный параметр *global*, то будет возвращаться глобальное меню.

.. code:: 
    
    GET
    /api/v1/menu/government
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "name": "government",
        "value": "MenuItem()....", 
        "conditions": "MainCondition()",
        "error": ""
    }      

menu
==============================
**POST** Добавить новое меню. Предварительно нужно вызывать команду **prepare/menu** (POST) и подписывать возвращаемое поле forsign.

.. code:: 
    
    POST
    /api/v1/menu
    name - имя меню
    value - шаблон меню
    conditions - права на изменения
    global - укажите 1, если добавить глобальное меню. В противном случае, меню добавится в текущее государство.
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

menu/{name}/[?global=1]
==============================
**PUT** Изменить существующее меню с именем **{name}**. Предварительно нужно вызывать команду **prepare/menu** (PUT) и подписывать возвращаемое поле forsign. Если изменяется глобальное меню, то следует добавить параметр *global*.

.. code:: 
    
    PUT
    /api/v1/menu/government
    value - шаблон меню
    conditions - права на изменения
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      
    
appendmenu/{name}/[?global=1]
==============================
**PUT** Добавить элементы к существующему меню с именем **{name}**. Предварительно нужно вызывать команду **prepare/appendmenu** (PUT) и подписывать возвращаемое поле forsign. Если изменяется глобальное меню, то следует добавить параметр *global*.

.. code:: 
    
    PUT
    /api/v1/appendmenu/government
    value - добавляемый шаблон меню
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }          

menulist/[?limit=...&offset=...&global=1]
==============================
**GET** Возвращает список меню. Можно указать смещение и количество запрашиваемых меню. Если нужны глобальные меню, то следует добавить параметр *global*. Также можно указать смещение и количество получаемых элементов.

.. code:: 
    
    GET
    /api/v1/menulist/
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "list": [{ 
            "name": "menu_default",
        }, 
        { 
            "name": "government",
       }, 
        ]
    }      


page/{name}/[?global=1]
==============================
**GET** Получить поля указанной страницы с именем **{name}**. По умолчанию, возвращается страница для текущего государства. Если указать дополнительный параметр *global*, то будет возвращаться глобальная страница. Кроме *name, value* и *conditions*, также возвращается имя привязанного к данной странице меню.

.. code:: 
    
    GET
    /api/v1/page/default
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "name": "default",
        "value": "Div:...", 
        "menu": "government", 
        "conditions": "MainCondition()",
        "error": ""
    }      

page
==============================
**POST** Добавить новую страницу. Предварительно нужно вызывать команду **prepare/page** (POST) и подписывать возвращаемое поле *forsign*.

.. code:: 
    
    POST
    /api/v1/page
    name - имя страницы
    menu - имя привязанного меню. 
    value - шаблон страницы
    conditions - права на изменения
    global - укажите 1, если добавить глобальную страницу. В противном случае, страница добавится в 
             текущее государство.
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

page/{name}/[?global=1]
==============================
**PUT** Изменить существующую страницу с именем **{name}**. Предварительно нужно вызывать команду **prepare/page** (PUT) и подписывать возвращаемое поле forsign. Если изменяется глобальная страница, то следует добавить параметр *global*.

.. code:: 
    
    PUT
    /api/v1/page/default
    value - шаблон страницы
    conditions - права на изменения
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

appendpage/{name}/[?global=1]
==============================
**PUT** Добавить шаблон к существующей странице с именем **{name}**. Предварительно нужно вызывать команду **prepare/appendpage** (PUT) и подписывать возвращаемое поле forsign. Если изменяется глобальная страница, то следует добавить параметр *global*.

.. code:: 
    
    PUT
    /api/v1/appendpage/government
    value - добавляемый шаблон страницы
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }          

pagelist/[?limit=...&offset=...&global=1]
==============================
**GET** Возвращает список страниц. Можно указать смещение и количество запрашиваемых страниц. Если нужны глобальные страницы, то следует добавить параметр *global*. Также можно указать смещение и количество получаемых элементов.

.. code:: 
    
    GET
    /api/v1/pagelist/
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "list": [{ 
            "name": "MyPage",
            "menu": "government",
        }, 
        { 
            "name": "government",
            "menu": "government",
       }, 
        ]
    }      

lang/{name}
==============================
**GET** Получить переводы для языкового ресурса с именем **{name}**. Возвращаются ресурсы для текущего государства.

.. code:: 
    
    GET
    /api/v1/lang/confirm
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "name": "confirm",
        "trans": "{\"en\": \"Confirm\", \"nl\": \"Bevestig\", \"ru\": \"Подтвердить\"}"
    }      

lang
==============================
**POST** Добавить новый языковой ресурс. Предварительно нужно вызывать команду **prepare/lang** (POST) и подписывать возвращаемое поле forsign.

.. code:: 
    
    POST
    /api/v1/lang
    name - имя языкового ресурса
    trans - языковые ресурсы в JSON формате. Например, {"en": "Confirm", "nl": "Bevestig", "ru": "Подтвердить"}
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

lang/{name}
==============================
**PUT** Изменить существующий языковой ресурс с именем **{name}**. Предварительно нужно вызывать команду **prepare/lang** (PUT) и подписывать возвращаемое поле forsign.

.. code:: 
    
    PUT
    /api/v1/lang/confirm
    trans - языковые ресурсы в JSON формате. Например, {"en": "Confirm", "nl": "Bevestig", "ru": "Подтвердить"}
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      
    
langlist/[?limit=...&offset=...]
==============================
**GET** Возвращает список языковых ресурсов. Можно указать смещение и количество запрашиваемых ресурсов. 

.. code:: 
    
    GET
    /api/v1/langlist/?limit=2
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "list": [{ 
            "name": "Yes",
            "trans": {"ru": "Да", "en": "Yes"}
        }, 
        { 
            "name": "No",
            "trans": {"ru": "Нет", "en": "No"}
        }, 
        ]
    }      

********************************************************************************
Команды API для работы с контрактами
********************************************************************************

contract/{id}/[?global=1]
==============================
**GET** Получить поля контракта с идентификатором **{id}**. По умолчанию, возвращается контракт для текущего государства. Если указать дополнительный параметр *global*, то будет информация по глобальному контракту.

.. code:: 
    
    GET
    /api/v1/contract/10
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "id": 45
        "name": "MyContract",
        "value": "contract MyContract{...", 
        "active": 1,  - 1 если контракт активный и 0 в противном случае.
        "conditions": 'ContractConditions("MainCondition")',
        "error": ""
    }      

contract
==============================
**POST** Добавить новый контракт. Предварительно нужно вызывать команду **prepare/contract** (POST) и подписывать возвращаемое поле *forsign*.

.. code:: 
    
    POST
    /api/v1/contract
    name - имя контракта
    wallet - кошелек владелец. Не указывается, если владельцем будет добавляющий контракт.
    value - текст контракта
    conditions - права на изменения
    global - укажите 1, если добавить глобальный контракт. В противном случае, контракт добавится в 
             текущее государство.
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

contract/{id}/[?global=1]
==============================
**PUT** Изменить существующий контракт с идентификатором **{id}**. Предварительно нужно вызывать команду **prepare/contract** (PUT) и подписывать возвращаемое поле forsign. Если изменяется глобальный контракт, то следует добавить параметр *global*.

.. code:: 
    
    PUT
    /api/v1/contract/4
    value - текст контракта
    conditions - права на изменения
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

activatecontract/{id}/[?global=1]
==============================
**PUT** Активировать контракт с идентификатором **{id}**. Предварительно нужно вызывать команду **prepare/activatecontract** (PUT) и подписывать возвращаемое поле forsign. Если активируется глобальный контракт, то следует добавить параметр *global*.

.. code:: 
    
    PUT
    /api/v1/activatecontract/5
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      

contractlist/[?limit=...&offset=...&global=1]
==============================
**GET** Возвращает список контрактов. Если нужны глобальные контракты, то следует добавить параметр *global*. Также можно указать смещение и количество получаемых элементов.

.. code:: 
    
    GET
    /api/v1/contractlist/
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "list": [{ 
            "id": 1,
            "name": "MyContract",
            "wallet": "XXXX-...-XXXX",
            "active": 1
        }, 
        { 
            "id": 2,
            "name": "AnotherContract",
            "wallet": "XXXX-...-XXXX",
            "active": 1
        }, 
        ]
        "error": ""
    }      

smartcontract/{name}
==============================
**GET** Получить информацию о смарт конракте с именем **{name}**. По умолчанию, смарт контракт ищется в текущей экосистеме. Для получения глобального смарт контракта указывайте перед именем *@0*, например, **@0GlobalContract**. В результате возвращается объект с полями *fields, name, active*, где **fields** в свою очередь массив, содержащий информацию о каждом параметре в разделе **data** контракта и содержит поля **name, htmltype, txtype, tags**.

.. code:: 
    
    GET
    /api/v1/smartcontract/mycontract
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "fields" : [
            {"name":"amount", "htmltype":"textinput", "txtype":"int64", "tags": "optional"},
            {"name":"name", "htmltype":"textinput", "txtype":"string" "tags": ""}
        ],
        "name": "@1mycontract",
        "active": true
    }      

smartcontract/{name}
==============================
**POST** Вызвать смарт контракт с указанным именем **{name}**. Предварительно нужно вызывать команду **prepare/smartcontract/{name}** (POST) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции.

.. code:: 
 
    POST
    /api/v1/smartcontract/mycontract
    параметры смарт контракта
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }

********************************************************************************
Команды API для экосистем
********************************************************************************

newstate
==============================
**POST** Создать экосистему. Предварительно нужно вызывать команду **prepare/newstate** (POST) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции.

.. code:: 
 
    POST
    /api/v1/newstate
    name - имя экосистемы
    currency - наименование валюты создаваемой экосистемы
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }

statelist/[?limit=...&offset=...]
==============================
**GET** Возвращает список экосистем. Можно указать смещение и количество запрашиваемых записей. Каждый элемент содержит следующие параметры: **id, name, logo, coords**.

.. code:: 
    
    GET
    /api/v1/statelist/?limit=2
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "list": [{ 
            "id": 1,
            "name": "MyState",
            "logo": "",
            "coords": "",
        }, 
        { 
            "id": 2,
            "name": "Test",
            "logo": "",
            "coords": "",
        }, 
        ]
    }      

stateparams/{name}
==============================
**GET** Получить информацию о параметре с именем **{name}** в текущей экосистеме. Возвращаются значения: **name, value, conditions**.

.. code:: 
    
    GET
    /api/v1/stateparams/currency_name
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "name": "currency_name",
        "value": "MYCUR",
        "condiitions": "true"
    }      

stateparamslist/[?limit=...&offset=...]
==============================
**GET** Возвращает список параметров текущей экосистемы. Можно указать смещение и количество запрашиваемых записей. Каждый элемент содержит следующие параметры: **name, value, conditions**.

.. code:: 
    
    GET
    /api/v1/stateparamslist
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "list": [{ 
            "name": "state_name",
            "value": "MyState",
            "conditions": "true",
        }, 
        { 
            "name": "state_currency",
            "value": "MY",
            "conditions": "true",
        }, 
        ]
    }      

stateparams
==============================
**POST** Добавить параметр в экосистему. Предварительно нужно вызывать команду **prepare/stateparams** (POST) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции.

.. code:: 
 
    POST
    /api/v1/stateparams
    name - имя параметра
    value - значение параметра
    conditions - условия для изменения прааметра
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }

stateparams/{name}
==============================
**PUT** Изменить значение существующего параметра с именем **{name}**. Предварительно нужно вызывать команду **prepare/stateparams** (PUT) и подписывать возвращаемое поле forsign. 

.. code:: 
    
    PUT
    /api/v1/stateparams/myvalue
    value - значение параметра
    conditions - права на изменения
    signature - hex подпись
    time - время, возвращенное prepare
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
        "error": ""
    }      
    
********************************************************************************
Команды API для работы с таблицами
********************************************************************************

table
==============================
**POST** Создать таблицу. Предварительно нужно вызывать команду **prepare/table** (POST) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции.

.. code:: 
 
    POST
    /api/v1/table
    name - имя таблицы
    global - укажите 1, если добавить глобальную таблицу. В противном случае, таблица добавится в 
             текущее государство.
    columns - список добавляемых колонок с полями **name, type, index**. Например, **[["mytext","text","0"],["mynum","int64", "1"]]**
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }

column/{tablename}
==============================
**POST** Добавить колонку в существующую таблицу. Предварительно нужно вызывать команду **prepare/column/{tablename}** (POST) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции. В качестве *tablename* необходимо указать полное имя таблицы с префиксом, например, *1_mytable*.

.. code:: 
 
    POST
    /api/v1/column
    name - имя колонки
    type - тип колонки, Например, int64.
    permissions - права на изменение колонки.
    index - 1, если создавать индекс и 0 в противном случае.
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }

table/{tablename}
==============================
**PUT** Изменить права доступа к таблице. Предварительно нужно вызывать команду **prepare/table** (PUT) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции. В качестве *tablename* необходимо указать полное имя таблицы с префиксом, например, *1_mytable*.

.. code:: 
 
    POST
    /api/v1/table/global_mytable
    insert - права доступа на вставку элемента
    new_column - права доступа на добавление колонки
    general_update - права доступа на изменение прав доступа.
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }

column/{tablename}/{columnname}
==============================
**PUT** Изменить права доступа к колонке таблицы. Предварительно нужно вызывать команду **prepare/table/{tablename}/{columnname}** (PUT) и подписывать возвращаемое поле forsign. В случае успешного выполнения возвращается хэш транзакции. В качестве *tablename* необходимо указать полное имя таблицы с префиксом, например, *1_mytable*.

.. code:: 
 
    POST
    /api/v1/column/global_mytable/mycol
    permissions - права доступа на изменени данной колонки 
    signature - hex подпись
    time - время, возвращенное prepare

Вариант ответа

.. code:: 

    200 (OK)
    Content-Type: application/json
    {
        "hash" : "67afbc435634.....",
    }
    
tables/[?limit=...&offset=...&global=1]
==============================
**GET** Возвращает список таблиц. Можно указать смещение и количество запрашиваемых таблицы. Если нужны глобальные тфблицы, то следует добавить параметр *global*. Также можно указать смещение и количество получаемых элементов.

.. code:: 
    
    GET
    /api/v1/tables
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "count": "100"
        "list": [{ 
            "name": "1_accounts",
        }, 
        { 
            "name": "1_citizens",
       }, 
        ]
    }      
    
