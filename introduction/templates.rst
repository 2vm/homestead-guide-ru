################################################################################
Шаблонизатор для страниц и приложений
################################################################################

********************************************************************************
Функции для шаблонов страниц и приложений
********************************************************************************

тест При создании шаблонов для страниц и написании приложений используется подобие языка, которое дает возможность формировать нужную нам HTML страницу.
Сами шаблоны могут состоять из вызовов двух типов 
FuncName() и FuncName{}. В обих случаях производится вызов GO-функции, только в первом случае параметры передаются как массив строк, а во втором как ассоцированный массив с парами ключ значение. Параметры можно не заключать в кавычки. Если параметр содержит запятую или закрывающуюу скобку, то можно заключить его в двойные кавычки или обратные ``.


Например,

.. code:: js

      FuncName( строка 1, строка 2, “Третья строка, с запятой”)

.. code:: js

      FuncName{ string1: строка 1, string2: строка 2, string3: “Третья строка, с запятой” }

.. note::

      Функции в будущем могут дополняться новыми параметрами.

********************************************************************************
Описание функций
********************************************************************************

**And(param, [param,...])** - Осуществляет логическую операцию И со всеми указанными параметрами. Значение параметра считается ложью, если он равен пустой строке, 0 или false. Во всех остальных случаях значение параметра считается истинной.

**Address([wallet_id])** - возвращает адрес кошелька в виде 1234-5678-...-7990. wallet_id должен быть числом. Если он не указан, то будет возвращаться адрес текущего гражданина (пользователя).


**AppNav(appname, [text])** - возвращает ссылку на указанное приложение. Если text не указан, то текст ссылки будет такой же как appname.


**BtnEdit( page, id )** - создает кнопку с шестеренкой с ссылкой на указанную страницу page и передает туда id в качестве параметра. Может применяться в таблицах для ссылки на редактирования элементов.


**BtnTemplate(template,text,[params],[class], [anchor])** - создает ссылку на шаблон в виде кнопки load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.  Четвертым параметром можно указать классы для кнопки, а пятым якорь для перехода по странице после загрузки содержимого.

**BtnSys(pagename,text,[params],[class])** - создает ссылку на предопределенную страницу в виде кнопки load_page('mypage’, {params}), где text - текст ссылки. params не является обязательным параметром.  Четвертым параметром можно указать классы для кнопки.

**CmpTime(left,right)** - сравнивает два времени в одинаковом формате. Желательно чтобы время указывалось в стандартном формате YYYY-MM-DD HH:MM:SS, можно использовать другие форматы, но последовательность должна быть от годов к секундам. Например, YYYYMMDD. Возвращает -1, если left < right, 0, если left = right или 1, если left > right.

**Date(date,[format])** - выводит date, переданную в стандартном формате 2006-01-02T15:04:05, в указанном формате. При указании формата можно использовать следующие значения - YY короткий год, YYYY полный год, MM - месяц, DD - день. Например, DD.MM.YY. Если формат не указан, то будет использоваться *dateformat* определенный в таблице languages, а если его нет, то YYYY-MM-DD.

**DateTime(datetime,[format])** - выводит дату и время, переданную в стандартном формате 2006-01-02T15:04:05, в указанном формате. При указании формата можно использовать следующие значения - YY короткий год, YYYY полный год, MM - месяц, DD - день, HH - часы, MI - минуты, SS - секунды. Например, YY/MM/DD HH:MM. Если формат не указан, то будет использоваться *timeformat* определенный в таблице languages, а если его нет, то YYYY-MM-DD HH:MI:SS.

**Div(class,text)** - создает тэг div с указанными классами и содержимым.

**Divs(class,[class,])** - создает вложенные друг в друга тэги div с указанными классами. Сколько указано параметров, столько будет создано вложенных div с указанными классами. После этого можно указывать содержимое. Для закрытия тэгов необходимо использовать функцию **DivsEnd**. 

.. code:: js

      Divs(md-5, panel) 
          P(pclass, Text)
      DivsEnd:

**Em(class,text)** - создает тэг em с указанными классами и содержимым.

**FullScreen(state)** - Переводит ширину рабочей области страницы на всю ширину окна когда state равен 1. Когда state равен 0, то рабочая область сужается.

**GetList(name, table, colnames, [where], [order], [limit])** - получает записи из таблицы table. name - имя, по которому можно получить конкретную запись из полученного списка с помощью функции **ListVal**. colnames - список получаемых столбцов. Первым, нужно указывать колонку с индексом и потом по этому значению будет идти доступ в **ListVal**. По желанию можно указать параметр where, порядок и кол-во получаемыхз строк.

**GetOne(colname, table, where, [value])** - получает значение colname из таблицы table с условием where = value. Если параметр value не указан, то тогда параметр where должен содержать весь запрос.

**GetRow(prefix, table, colname, [value])** - получает запись из таблицы table с условием colname = value. Все столбцы записи записываются в переменные с префиксом prefix. Если параметр value не указан, то тогда параметр colname должен содержать весь запрос where.
Например, имеется id, name получим prefix_id, prefix_name. Эти переменные можно использовать в дальнейшем. Для этого достаточно указывать #prefix_id#, #prefix_name#. Вывод отсутствует. 

**If(condition, [iftrue], [iffalse])** - возвращает второй параметр, если первый параметр истина, в противном случае возвращается третий параметр. Первый параметр считается ложь, если он пустая строка, 0 или false. Если в команде **If** указан только один параметр, то тогда в случае истинности будут выполнятся вложенные функции до вызова **IfEnd**. Кроме этого, вы можете использовать внутри команды **Else** и **ElseIf**. Функции **If** могут быть вложены друг в друга. Например,

.. code:: js

      If(#value#) 
          Divs(myclass)
              If(#par#)
                 .....
              IfEnd:
          DivsEnd:
      ElseIf(#param2#)
          P(class, Text)
      Else:
          Divs(myclass2)
              .....
          DivsEnd:
      IfEnd:


**Image(src, [alt], [class] )** - возвращает тэг img с указанной картинкой. alt - необязательный параметр. Третьим параметром можно указать классы для изображения.


**Json(data)** - создает тэг script с переменной jdata и указанными json данными.
Например,

.. code:: js

      Json(`param1: 1, param2: “строка”`) 
      
даст 

.. code:: js

      var jdata = { param1: 1, param2: “строка”}

**LiTemplate(template, [text], [params])** - возвращает элемент li с сcылкой на указанный шаблон. Если text не указан, то текст ссылки будет такой же как template. В третьем параметре можно указать переменные для ссылки.

.. code:: js

      LiTemplate(link, mypage, global:1)


**LinkTemplate(template,text,params)** - создает ссылку на шаблон load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.

**ListVal(name, index, column])** - получает значение из списка полученного функцией **GetList**. name - такое же имя, какой использовалось в **GetList**. index - идентификатор поиска по первому указанному столбцу. column - имя колонки с возвращаемым значением.

**Map(coords)** - выводит карту в соответствии с переданными дянными google maps в параметре coords. Для установки высоты карт нужно определить преварительно переменную hmap. По умолчанию, высота карты составляет 100 пикселей, а ширина растягивается на максимально возможную величину.

**MapPoint(coords)** - выводит карту с маркером в соответствии с переданными дянными google maps в параметре coords. Для установки высоты карт нужно определить преварительно переменную hmap. По умолчанию, высота карты составляет 100 пикселей, а ширина растягивается на максимально возможную величину.

**MarkDown(text)** - преобразует текст с разметкой markdown в HTML. Например,

.. code:: js

      MarkDown(`## Header
            Параграф
      `)

**Navigation( params, …)** - возвращает панель с хлебными крошками params и ссылкой Edit справа. Например, Navigation( LiTemplate(dashboard_default, citizen),goverment)

**Or(param, [param,...])** - Осуществляет логическую операцию ИЛИ со всеми указанными параметрами. Значение параметра считается ложью, если он равен пустой строке, 0 или false. Во всех остальных случаях значение параметра считается истинной.

**PageTitle(header)** - создает панель для элементов с заголовком header. В конце необходимо вставить вызов PageEnd() для закрытия div-ов.

**P(class,text)** - создает тэг p с указанным классом и содержимым.

**Ring(count,[title],[size])** - Выводит кольцо со значением count посередине. При желании можно указать заголовок в title и размер кольца в параметре size.

**SetVar( name=value,.....)** - функция присваивает значения указанным переменным. name - имя переменной, value - значение. Вывод отсутствует. Если вы не хотите, чтобы сразу подставлялись значения макросов, то используйте #= вместо =. Также, если имеются запятые в присваевоемом значении, то заключите весь параметр в обратные кавычки ``.
Например,

.. code:: js

      SetVar( var1= value1, var2 = “Значение 2”, var3=10, `var4 #= #citizen_id#, #state_id#` )
      
К переменным можно обращаться в дальнейшем как  #var1#, #var2# …

**Small(class,text)** - создает тэг small с указанными классами и содержимым.

**StateLink(prefix,name)** - возвращает переменную с именем prefix_name.

**StateValue(name, [index])** - возвращает значение указанного параметра из таблицы state_parameters. Предположим, что у вас в одном параметре находится список значений через запятую. например, gender = male,female и вы хотите получить какое-то одно значение. В этом случае, вы можете указать индекс этого значения (с 1) и при этом если есть языковый ресрус с такм именем, то подставится его значение. StateValue(gender, 2) возвратит Female.

**SysLink(page,text,[params])** - создает ссылку на страницу load_page(page, {params} ), где text - текст ссылки. params не является обязательным параметром.


**Table** {
    Table: tablename
    Order: id
    Where: условие
    Columns: [[Заголовок, значение],...]
} - возвращает таблицу Table - имя таблицы, Order - колонка сортировки, необязательный параметр. Where - условие выборки, необязательный параметр. Columns - массив показываемых столбцов из заголовка и значений. В качестве значений можно указывать #имяколонки#.


**Title(text)** - создает заголовок с классом content-heading.


**TemplateNav(template,text,[param], [value])** - возвращает ссылку на шаблон load_template('template’, {param:value} ), где text - текст ссылки. param и value не являются обязательными параметрами.


**TextHidden(idname,....)** - создает скрытые textarea с id = указанным именам, а в качестве значение берется значение переменной с таким же именем. Например,
если есть переменная test = “Строка”, то TextHidden создаст textarea с id=”test” и значением Строка.

**Trim(text)** - Функция удаляет с начала и с конца пробелы и невидимые символы.

**TxForm{Contract: TXName}** - Функция возвращает форму указанного контаркта с именем TXName.


**TxId(txname)** - возвращается идентификатор указанной транзакции.

**ValueById(table,idval,columns,[aliases])** - Получает запись из таблицы table с id = idval. В columns через запятую должны быть перечислены имена колонок, со значениями которых будут созданы переменные с такими же именами. Если вы хотите создавать переменные с отлиxными именами, то перечислите алиасы в том же порядке через запятую в параметре aliases.

**WiAccount(address)** - выводит в специальном оформлении номер аккаунта переданном в параметре address.

**WiBalance(value, money)** - выводит в специальном оформлении денежную величину value и добавляет обозначение валюты указанной в параметре money.

**WiCitizen(name, address, [image], [flag])** - выводит в специальном оформлении информацию о гражданине. name - имя, address - номер кошелька, который в случае необходимости будет приведен к виду 1234-...-5678. Можно указать изображение и флаг страны.
