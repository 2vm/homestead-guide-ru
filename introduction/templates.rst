################################################################################
Шаблонизатор для страниц и приложений
################################################################################

********************************************************************************
Функции для шаблонов страниц и приложений
********************************************************************************

тест При создании шаблонов для страниц и написании приложений используется подобие языка, которое дает возможность формировать нужную нам HTML страницу.
Сами шаблоны могут состоять из вызовов двух типов 
FuncName() и FuncName{}. В обих случаях производится вызов GO-функции, только в первом случае параметры передаются как массив строк, а во втором как ассоцированный массив с парами ключ значение. Параметры можно не заключать в кавычки. Если параметр содержит запятую или закрывающуюу скобку, то можно заключить его в двойные кавычки или обратные ``.


Например,

.. code:: js

      FuncName( строка 1, строка 2, “Третья строка, с запятой”)

.. code:: js

      FuncName{ string1: строка 1, string2: строка 2, string3: “Третья строка, с запятой” }

.. note::

      Функции в будущем могут дополняться новыми параметрами.

********************************************************************************
Описание функций
********************************************************************************

**Address([wallet_id])** - возвращает адрес кошелька в виде 1234-5678-...-7990. wallet_id должен быть числом. Если он не указан, то будет возвращаться адрес текущего гражданина (пользователя).


**AppNav(appname, [text])** - возвращает ссылку на указанное приложение. Если text не указан, то текст ссылки будет такой же как appname.


**BtnEdit( page, id )** - создает кнопку с шестеренкой с ссылкой на указанную страницу page и передает туда id в качестве параметра. Может применяться в таблицах для ссылки на редактирования элементов.


**BtnTemplate(template,text,[params],[class], [anchor])** - создает ссылку на шаблон в виде кнопки load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.  Четвертым параметром можно указать классы для кнопки, а пятым якорь для перехода по странице после загрузки содержимого.

**BtnSys(pagename,text,[params],[class])** - создает ссылку на предопределенную страницу в виде кнопки load_page('mypage’, {params}), где text - текст ссылки. params не является обязательным параметром.  Четвертым параметром можно указать классы для кнопки.

**Div(class,text)** - создает тэг div с указанными классами и содержимым.

**Divs(class,[class,])** - создает вложенные друг в друга тэги div с указанными классами. Сколько указано параметров, столько будет создано вложенных div с указанными классами. После этого можно указывать содержимое. Для закрытия тэгов необходимо использовать функцию **DivsEnd**. 

.. code:: js

      Divs(md-5, panel) 
          P(pclass, Text)
      DivsEnd:

**Em(class,text)** - создает тэг em с указанными классами и содержимым.

**GetRow(prefix, table, colname, value)** - получает запись из таблицы table с условием colname = value. Все столбцы записи записываются в переменные с префиксом prefix.
Например, имеется id, name получим prefix_id, prefix_name. Эти переменные можно использовать в дальнейшем. Для этого достаточно указывать #prefix_id#, #prefix_name#. Вывод отсутствует.


**Image(src, [alt], [class] )** - возвращает тэг img с указанной картинкой. alt - необязательный параметр. Третьим параметром можно указать классы для изображения.


**Json(data)** - создает тэг script с переменной jdata и указанными json данными.
Например,

.. code:: js

      Json(`param1: 1, param2: “строка”`) 
      
даст 

.. code:: js

      var jdata = { param1: 1, param2: “строка”}


**Navigation( params, ….)** - возвращает панель с хлебными крошками params и ссылкой Edit справа. Например, Navigation( LiTemplate(dashboard_default, citizen),goverment)

**LiTemplate(template, [text], [params])** - возвращает элемент li с сcылкой на указанный шаблон. Если text не указан, то текст ссылки будет такой же как template. В третьем параметре можно указать переменные для ссылки.

.. code:: js

      LiTemplate(link, mypage, global:1)


**LinkTemplate(template,text,params)** - создает ссылку на шаблон load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.


**MarkDown(text)** - преобразует текст с разметкой markdown в HTML. Например,

.. code:: js

      MarkDown(`## Header
            Параграф
      `)


**PageTitle(header)** - создает панель для элементов с заголовком header. В конце необходимо вставить вызов PageEnd() для закрытия div-ов.

**P(class,text)** - создает тэг p с указанным классом и содержимым.


**SetVar( name=value,.....)** - функция присваивает значения указанным переменным. name - имя переменной, value - значение. Вывод отсутствует. 
Например,

.. code:: js

      SetVar( var1= value1, var2 = “Значение 2”, var3=10 )
      
К переменным можно обращаться в дальнейшем как  #var1#, #var2# …

**Small(class,text)** - создает тэг small с указанными классами и содержимым.

**StateValue(name)** - возвращает значение указанного параметра из таблицы state_parameters.


**SysLink(page,text,[params])** - создает ссылку на страницу load_page(page, {params} ), где text - текст ссылки. params не является обязательным параметром.


**Table** {
    Table: tablename
    Order: id
    Where: условие
    Columns: [[Заголовок, значение],...]
} - возвращает таблицу Table - имя таблицы, Order - колонка сортировки, необязательный параметр. Where - условие выборки, необязательный параметр. Columns - массив показываемых столбцов из заголовка и значений. В качестве значений можно указывать #имяколонки#.


**Title(text)** - создает заголовок с классом content-heading.


**TemplateNav(template,text,[param], [value])** - возвращает ссылку на шаблон load_template('template’, {param:value} ), где text - текст ссылки. param и value не являются обязательными параметрами.


**TextHidden(idname,....)** - создает скрытые textarea с id = указанным именам, а в качестве значение берется значение переменной с таким же именем. Например,
если есть переменная test = “Строка”, то TextHidden создаст textarea с id=”test” и значением Строка.


**TxForm{Contract: TXName}** - Функция возвращает форму указанного контаркта с именем TXName.


**TxId(txname)** - возвращается идентификатор указанной транзакции.
