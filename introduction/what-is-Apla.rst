################################################################################
Общая информация 
################################################################################
********************************************************************************
Что такое Apla?
********************************************************************************

Apla - это блокчейн-платформа, разработанная для построения цифровых экосистем на базе интегрированной среды разработки приложений с многоуровневой системой управления правами доступа к данным, интерфейсам и смарт-контрактам. Платформа Apla построена на базе программного продукта разработанного компанией EGAAS S.A.
 
Apla по своей структуре и функционированию принципиально отличается от большинства существующих блокчейн-платформ. 
* Написание и использование блокчейн-приложений происходит в автономных программных средах с фиксированным членством, называемых экоситемами. 
* Деятельность в экосистемах основана на создании реестров и поддержке их функционирования с помощью смарт-контрактов, а не на обмене транзакциями/сообщениями между аккаунтами. 
* Управление правами доступа к реестрам и регулирование отношений между членами экосистем осуществляется с помощью правовой системы на базе смарт-законов. 

********************************************************************************
Техническая реализация
********************************************************************************
Сеть
==========================
Блокчейн-платформа Apla построена на базе одноранговой сети. Полные узлы сети содержат актуальную версию блокчейна и базу данных, в которой фиксируется текущее состояние платформы.  Пользователи сети получают данные обращаясь к базам данных полных узлов с помощью программного клиента (или команд REST AP).  Новые данные отправляют в сеть в виде подписанных пользователем транзакций, которые по сути являются командами модификации базы данных.  Из транзакций формируются блоки, которые присоединяются к блокчейнам на узлах сети, и одновременно с этим происходит отработка транзакции - изменение состояния базы данных.

Валидирующие узлы
==========================
Полные узлы сети, имеющие право формировать блоки, называются валидирующими.  Число валидирующих узлов ограничено и задается параметром count_of_nodes в настройках платформы. 

Список валидирующих узлов хранится в параметре full_nodes в формате 

.. code:: js

   [[“host1:port",”-1222","nodepub1"], ["host2:ip","-1222", "nodepub2"]], где
 
* host1:port - это адрес хоста, на который пересылаются  транзакции и новые блоки, также с этого адреса можно получить всю цепочку блоков начиная с 1-го;
* -1222 - номер виртуального аккаунта, на который нода получает комиссию; если кошелек не существует, то комиссия не снимается.
* nodepub1 - публичный ключ узла, необходимый для проверки подпись блоков, созданных им.


Транзакции
==========================
Транзакция формируется программным клиентом (или командой contract REST API) и  содержит данные для выполнения специального программного контролера - контракта (“смарт-контракта”), вызываемого пользователем. Транзакция имеет следующий формат: 

* Type           ID вызываемого контракта                                     
* Data           параметры, передаваемые контракту                           
* KeyID          идентификатор пользователя отправившего транзакцию          
* PublicKey      публичный ключ пользователя (опционно)                      
* BinSignatures  подпись транзакции                                          
* Time           время отправления транзакции                                
* EcosystemD     номер экосистемы, из которой отправлена транзакция          
* ТokenEcosystem номер экосистемы, в токенах которой оплачивается транзакция 
* MaxSum         максимальная комиссия за транзакцию                         
* PayOver        дополнительная плата за ускорение в очереди                 

Транзакция подписывается приватным ключом владельца аккаунта. Ключ вместе с функцией подписания может храниться: в браузере, в программном клиенте, на сим-карте, на специальном физическом устройстве. В текущей реализации приватный ключ хранится в программном клиенте Molis в зашифрованном алгоритмом AES виде. Транзакции подписываются с помощью алгоритма ECDSA.

Сетевой протокол
==========================
Транзакция отправляется пользователем на один из валидирующих узлов, где она проходит базовую проверку формата и встраивается в очередь транзакций, а также рассылается по сети другим валидирующим узлам, где она также попадает в очередь транзакций. 

Узел, имеющий в данный момент право генерировать блок (согласно параметру full_nodes), извлекает транзакции из очереди и посылает в блок-генератор. Параллельно с формированием блока происходит отработка транзакций:  транзакция посылается в виртуальную машину, где происходит выполнение контракта с параметрами, переданными транзакцией, в результате чего происходит модификация состояния базы данных.
 
Новый блок проверяется на наличие ошибок, и если он признается валидным, то рассылается другим валидирующим узлам. 

Валидирующие узлы добавляют полученный блок в очередь блоков. Очередной блок после валидации присоединяется к блокчейну, а содержащиеся в нем транзакции отрабатываются, обновляя состояние базы данных.

Проверка блока и транзакций
==========================
Проверка блока, проводимая валидирующим узлом после его формирования, а также на всех других валидирующих узлах после его получения, содержит следующие тесты:

* равен ли первый байт 0, если нет, то полученные данные не являются блоком;
* время генерации блока не больше текущего;
* имел ли право узел подписавший блок сделать это в указанное в блоке время;
* номер блока больше последнего блока в имеющейся цепочке;
* не превышен ли общий лимит на оплату транзакций блока;
* проверка правильности подписи блока ключом создавшего блок узла;  подписываются  BlockID, Hash предыдущего блока, Time, Position в full_nodes, MrklRoot от всех транзакций блока;
* проверка правильности всех транзакций блока: 
    * уникальность хеша транзакции;   
    * не превышен ли лимит транзакций подписанных одним ключом (max_block_user_tx);
    * не превышен размер транзакции (max_tx_size);
    * время посылки не больше времени формирования блока и не меньше времени формирования блока минус 86400 сек;
    * правильность подписи транзакции;
    * существуют ли токены, в которых происходит оплата ресурсов в списке sys_currencies;
    * достаточно ли токенов на виртуальном аккаунте пользователя для оплаты необходимых для выполнения  транзакции ресурсов.
  
База данных платформы
==========================
Единая база данных платформы, копии которой поддерживаются на каждом полном узле сети, используется для хранения больших объемов данных (реестров) и быстрого получения значений контрактами и интерфейсами.  При формировании очередного блока и присоединении его к блокчейну на всех полных узлах платформы происходит синхронное обновление таблиц базы данных. Таким образом, база данных хранит текущее (актуальное) состояние блокчейна, что обеспечивает идентичность данных на всех полных узлах и однозначность выполнения контрактов на любом из валидирующих узлов. При запуске нового полного узла сети актуальное состояние базы данных реализуется последовательным выполнением всех транзакций записанных в блоках блокчейна. 

На данный момент в качестве СУБД на платформе Apla используется PostgreSQL. 





Базовой конструкцией для реализации алгоритмов приложений является «контракт». В виде контрактов оформляются законченные фрагменты кода, обеспечивающие принятие входных данных от пользователя или другого контракта, анализ их корректности и выполнение необходимых транзакций. Язык написания контрактов - это скриптовый язык с быстрой компиляцией в байт-код, содержащий необходимый набор функций для создания реестров и выполнения всех типов транзакций с записями в них. 

Вложенный язык описания шаблонов страниц позволяет: 

* упростить написание интерфейсов  к контрактам, 
* оптимизировать и упростить структуры языков программирования  шаблонов и контрактов, вследствие их взаимной согласованности;
* повысить защищенность системы  за счет сохранения интерфейсов в блокчейне наряду с контрактами.

Платформа обладает многоуровневой системой управления правами на создание и редактирование реестров, контрактов, страниц и меню интерфейса, параметров настроечной таблицы. Для контроля прав доступа к элементам платформы в основном используются специальные контракты – смарт-законы, благодаря чему система контроля доступа получается гибконастраиваемой и, что самое главное, позволяет автоматически отслеживать передачу прав доступа.
