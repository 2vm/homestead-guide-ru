################################################################################
Общая информация 
################################################################################
********************************************************************************
Что такое Apla?
********************************************************************************

Apla - это блокчейн-платформа, разработанная для построения цифровых экосистем на базе интегрированной среды разработки приложений с многоуровневой системой управления правами доступа к данным, интерфейсам и смарт-контрактам. Платформа Apla построена на базе программного продукта разработанного компанией EGAAS S.A.
 
Apla по своей структуре и функционированию принципиально отличается от большинства существующих блокчейн-платформ. 

* Написание и использование блокчейн-приложений происходит в автономных программных средах с фиксированным членством, называемых *экоситемами*. 
* Деятельность в экосистемах основана на создании *реестров* и поддержке их функционирования с помощью *смарт-контрактов*, а не на обмене транзакциями/сообщениями между аккаунтами. 
* Управление правами доступа к реестрам и регулирование отношений между членами экосистем осуществляется с помощью правовой системы на базе *смарт-законов*. 

********************************************************************************
Блокчейн-платформа Apla
********************************************************************************
Сеть
==========================
Блокчейн-платформа Apla построена на базе одноранговой сети. Полные узлы сети содержат актуальную версию блокчейна и базу данных, в которой фиксируется текущее состояние платформы.  Пользователи сети получают данные обращаясь к базам данных полных узлов с помощью программного клиента (или команд REST AP).  Новые данные отправляют в сеть в виде подписанных пользователем транзакций, которые по сути являются командами модификации базы данных.  Из транзакций формируются блоки, которые присоединяются к блокчейнам на узлах сети, и одновременно с этим происходит отработка транзакции - изменение состояния базы данных.

Валидирующие узлы
==========================
Полные узлы сети, имеющие право формировать блоки, называются *валидирующими*.  Число валидирующих узлов ограничено и задается параметром count_of_nodes в настройках платформы. 

Список валидирующих узлов хранится в параметре full_nodes в формате 

.. code:: js

   [[“host1:port",”-1222","nodepub1"], ["host2:ip","-1222", "nodepub2"]], где
 
* host1:port - это адрес хоста, на который пересылаются  транзакции и новые блоки, также с этого адреса можно получить всю цепочку блоков начиная с 1-го;
* -1222 - номер виртуального аккаунта, на который нода получает комиссию; если кошелек не существует, то комиссия не снимается.
* nodepub1 - публичный ключ узла, необходимый для проверки подпись блоков, созданных им.

Транзакции
==========================
Транзакция формируется программным клиентом (или командой contract REST API) и  содержит данные для выполнения специального программного контролера - контракта (“смарт-контракта”), вызываемого пользователем. Транзакция имеет следующий формат: 

* Type - ID вызываемого контракта                                     
* Data - параметры, передаваемые контракту                           
* KeyID - идентификатор пользователя отправившего транзакцию          
* PublicKey - публичный ключ пользователя (опционно)                      
* BinSignatures - подпись транзакции                                          
* Time - время отправления транзакции                                
* EcosystemD - номер экосистемы, из которой отправлена транзакция          
* ТokenEcosystem - номер экосистемы, в токенах которой оплачивается транзакция 
* MaxSum - максимальная комиссия за транзакцию                         
* PayOver - дополнительная плата за ускорение в очереди                 

Транзакция подписывается приватным ключом владельца аккаунта. Ключ вместе с функцией подписания может храниться: в браузере, в программном клиенте, на сим-карте, на специальном физическом устройстве. В текущей реализации приватный ключ хранится в программном клиенте Molis в зашифрованном алгоритмом AES виде. Транзакции подписываются с помощью алгоритма ECDSA.

Сетевой протокол
==========================
Транзакция отправляется пользователем на один из валидирующих узлов, где она проходит базовую проверку формата и встраивается в очередь транзакций, а также рассылается по сети другим валидирующим узлам, где она также попадает в очередь транзакций. 

Узел, имеющий в данный момент право генерировать блок (согласно параметру full_nodes), извлекает транзакции из очереди и посылает в блок-генератор. Параллельно с формированием блока происходит отработка транзакций:  транзакция посылается в виртуальную машину, где происходит выполнение контракта с параметрами, переданными транзакцией, в результате чего происходит модификация состояния базы данных.
 
Новый блок проверяется на наличие ошибок, и если он признается валидным, то рассылается другим валидирующим узлам. 

Валидирующие узлы добавляют полученный блок в очередь блоков. Очередной блок после валидации присоединяется к блокчейну, а содержащиеся в нем транзакции отрабатываются, обновляя состояние базы данных.

Проверка блока и транзакций
==========================
Проверка блока, проводимая валидирующим узлом после его формирования, а также на всех других валидирующих узлах после его получения, содержит следующие тесты:

* равен ли первый байт 0, если нет, то полученные данные не являются блоком;
* время генерации блока не больше текущего;
* имел ли право узел подписавший блок сделать это в указанное в блоке время;
* номер блока больше последнего блока в имеющейся цепочке;
* не превышен ли общий лимит на оплату транзакций блока;
* проверка правильности подписи блока ключом создавшего блок узла;  подписываются  BlockID, Hash предыдущего блока, Time, Position в full_nodes, MrklRoot от всех транзакций блока;
* проверка правильности всех транзакций блока: 
    * уникальность хеша транзакции;   
    * не превышен ли лимит транзакций подписанных одним ключом (max_block_user_tx);
    * не превышен размер транзакции (max_tx_size);
    * время посылки не больше времени формирования блока и не меньше времени формирования блока минус 86400 сек;
    * правильность подписи транзакции;
    * существуют ли токены, в которых происходит оплата ресурсов в списке sys_currencies;
    * достаточно ли токенов на виртуальном аккаунте пользователя для оплаты необходимых для выполнения  транзакции ресурсов.
  
База данных платформы
==========================
Единая база данных платформы, копии которой поддерживаются на каждом полном узле сети, используется для хранения больших объемов данных (реестров) и быстрого получения значений контрактами и интерфейсами.  При формировании очередного блока и присоединении его к блокчейну на всех полных узлах платформы происходит синхронное обновление таблиц базы данных. Таким образом, база данных хранит текущее (актуальное) состояние блокчейна, что обеспечивает идентичность данных на всех полных узлах и однозначность выполнения контрактов на любом из валидирующих узлов. При запуске нового полного узла сети актуальное состояние базы данных реализуется последовательным выполнением всех транзакций записанных в блоках блокчейна. 

На данный момент в качестве СУБД на платформе Apla используется PostgreSQL. 

********************************************************************************
Экосистемы Apla
********************************************************************************
Пространство данных платформы Apla разбито на множество относительно самостоятельных кластеров - *экосистем*, в которых реализуется деятельность пользователей сети. Экосистемы Apla представляют собой автономные программные среды, включающие в себя множество приложений и пользователей, создающих приложения и работающих с ними.  Открыть новую экосистему может любой владелец аккаунта Apla.

Программно экосистема представляет собой совокупность приложений - систем интерфейсов,  контрактов, таблиц базы данных. На принадлежность элементов приложений к конкретной экосистеме указывает префикс в их имени, например, @1name, в котором после знака “@” указывается ID экосистемы. При обращении к элементам приложений внутри одной экосистемы префикс можно опустить. 

В каждой экосистеме через программный клиент Molis доступны инструменты управления таблицами базы данных, редактор контрактов, редактор интерфейсов и другой функционал, необходимый для проектирования приложений без привлечения каких-либо дополнительных программных модулей. 

Пользователем платформы Apla можно стать только получив приватный ключ для доступа в одну из экосистем (традиционно в экосистему №1). Пользователь может быть членом любого количества экосистем. Переход между экосистемами осуществляется при помощи специального меню программного клиента.

Интегрированная среда разработки
==========================
В программном клиенте платформы Molis для создания блокчейн-приложений реализована полнофункциональная интегрированная среда разработки (IDE), работа в которой не требует от программистов специальных знаний в области  блокчейн-технологий. В состав IDE входят:

- таблица параметров экосистемы,
- редактор контрактов, 
- инструменты для администрирования таблиц базы данных,
- редактор интерфейсов и визуальный конструктор интерфейсов,
- редактор языковых ресурсов,
- сервис экспорта/импорта приложений.
  
Приложения Apla
==========================
Приложение на платформе Apla - это система таблиц, контрактов, интерфейсов с настроенными правами доступа выполняющая некоторую функцию или реализующая отдельный сервис. 

Приложения не подразумевают наличия некоторого объединяющего, координирующего контракта (мастер контракта) - отдельные контракты вызываются действиями пользователей (например, кликом на кнопке интерфейса), и результатом работы контрактов являются записи в таблицы базы данных. 

Для инициации пользовательских событий используется система оповещения (представляющая собой приложение, устанавливаемое по умолчание во всех экосистемах). При необходимости оповестить члена экосистемы (или представителя роли) о необходимости совершить некоторое действие (подписать контракт, подтвердить данные и пр.) ему посылается сообщение с предложением перейти на определенную страницу интерфейса. Использование системы оповещения позволяет, с одной стороны, моделировать сложную деятельность, а с другой, упростить и ускорить создание и последующую модернизацию приложений. 

Каждая экосистема для создания приложений создает собственный набор таблиц, что, однако, не исключает возможность обращения к таблицам других экосистем, с указанием их префикса. Таблицы никак не связаны с конкретными контрактами и могут использоваться всеми приложениями. Возможность записи данных в таблицы контролируется настройками прав доступа. Для управления правами могут использоваться специальные контракты - смарт-законы. 

Следует отметить, что проектирование и создание приложений Apla не требует от программистов знаний о структуре и  протоколах сети, понимания алгоритма формирования блокчейна и синхронизации баз данных полных узлов. Работа в программном клиенте Molis - создание элементов приложений, чтение данных из таблиц, запуск контрактов, отображение результата - выглядит как оперирование модулями некой программной среды, развернутой на локальном компьютере.

Таблицы экосистемы
==========================
В каждой экосистеме возможно создание неограниченного числа таблиц в базе данных платформы. Как уже отмечалось, таблицы экосистемы идентифицируются по префиксу, содержащему номер экосистемы, который не отражается в программном клиенте при работе “внутри” экосистемы. Запись в таблицы других экосистем возможна, если позволяют настройки прав доступа.

Инструменты для администрирования таблиц
==========================
Инструменты управление таблицами экосистемы доступны в разделе Tables административной секции программного клиента Molis, где реализованы следующие функции:

- просмотр списка таблиц и их содержимого; 
- создание новых таблиц;
- добавление в таблицы новых колонок с выбором типовых форматов данных: Text, Date/Time, Varchar, Character, JSON, Number, Money, Double, Binary; 
- установление правами доступа на запись данных и изменение структуры таблиц.

Операции с данными таблиц
==========================
Для работы с  базой данных язык контрактов Simvolio и язык шаблонизатора Protypo содержат функции DBFind, обеспечивающие получение из таблиц как отдельных значений, так и массивов. Язык контрактов  содержит функции добавления строк в таблицы DBInsert и изменения значений в существующих записях DBUpdate (при изменении значения переписывается только данные в таблице базы данных, в блокчейн же добавляется новая транзакция с сохранением всех предыдущих транзакций). Данные в таблицах не удаляются.

С целью минимизации времени выполнения контрактов в функциях  DBFind не реализовано обращение сразу к нескольким таблицам, то есть не поддерживаются запросы с JOIN. Поэтому целесообразно отказаться от нормализации таблиц приложений и записывать в строки таблиц полную информацию, дублирующую данные в других таблицах. Однако, это не просто вынужденная мера, а необходимое требование к блокчен-приложениям, в которых сохраняться (подписываться приватным ключом) должен некий полный, законченный, актуальный на определенный момент времени набор данных (документ), который не может быть модифицирован вследствие изменения значений в других таблица (что неизбежно в реляционной схеме).
