################################################################################
REST API v2
################################################################################

Черновик команд API v2 для работы с EGAAS. Для работы с REST API v2 необходимо скомпилировать сервер из ветки **gorm_arch** и запускать с параметром командной строки **-v2**.

Вызов команды происходит при обращении к **/api/v2/command/[param]**, где **command** - имя команды, **param** - дополнительный параметр, например, имя изменяемого или получаемого ресурса. Отправлять параметры запросов следует с **Content-Type: x-www-form-urlencoded**. Ответ сервера представлен в JSON формате.

********************************************************************************
Обработка ошибок
********************************************************************************

В случае успешного выполнения запроса возвращается статус 200. В случае ошибки, кроме ошибочного статуса возвращается объект JSON c полями:

* **error** - идентификатор ошибки. 
* **msg** - текст ошибки. 
* **params** - массив дополнительных параметров ошибки, которые могут быть подставлены в сообщение об ошибке.

Пример ответа

.. code:: 

    400 (Bad Request)
    Content-Type: application/json
    {
        "err": "E_INVALIDWALLET",
        "msg": "Wallet 1111-2222-3333 is not valid",
        "params": ["1111-2222-3333"]
    }

Список ошибок

* **E_DBNIL** - DB is nil
* **E_INSTALLED** - Apla is already installed
* **E_INVALIDWALLET** - Wallet %s is not valid
* **E_NOTINSTALLED** - Apla is not installed. В этом случае нужно запустить установку командно *install*.
* **E_RECOVERED** - API recovered. Возвращается в случае panic error.
* **E_REFRESHTOKEN** - Refresh token is not valid
* **E_SERVER** - Server error. Возвращается в случае ошибки в библиотечных функциях golang. Поле *msg* содержит текст ошибки.
* **E_SIGNATURE** - Signature is incorrect
* **E_STATELOGIN** - %s is not a membership of ecosystem %s
* **E_TOKEN** - Token is not valid
* **E_UNAUTHORIZED** - Unauthorized
* **E_UNDEFINEVAL** - Value %s is undefined
* **E_UNKNOWNUID** - Unknown uid

Если, неважно где, возвращается ошибка **E_RECOVERED**, то это баг, который требует обнаружения и исправления. Ошибка **E_NOTINSTALLED** должна возвращаться любой командой кроме install, в случае, если система еще не установлена. Ошибка **E_SERVER** теоретически может возвратится в любой команде. Если она возникает на неверных входных параметрах, то её можно заменить на соответствующие ошибки. В противном случае, это ошибка сообщает о неверном функционировании или настройке системы, то есть требует более детального изучения. Ошибка **E_UNAUTHORIZED** может возвращаться на любой команде кроме *install, getuid, login* в случае, если не был осуществлен login или сессия закончилась.

********************************************************************************
Аутентификация
********************************************************************************

Для аутентификации используется **JWT токен** http://www.jwt.org. После получения JWT токена необхоимо передавать его при каждом запросе в заголовке: **Authorization: Bearer TOKEN_HERE**. 

getuid
==============================
**GET** Возвращает уникальное значение, которое нужно подписать своим приватным ключом и отправить обратно серверу с помощью команды **login**. На данный момент создается временный JWT токен, который нужно передать в **Authorization** при вызове **login**. Все поля JSON ответа:

.. code:: 
    
    GET
    /api/v2/getuid
    
Ответ

* *uid* - строка для подписи.
* *token* - временный токен для передачи в login.

В случае, когда авторизация не требуется, то возвращаются

* *expire* - количество секунд до истечения срока. 
* *state* - идентификатор экосистемы.
* *wallet* - идентификатор  кошелька.
* *address* - адрес кошелька в формате XXXX-XXXX-.....-XXXX.
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "uid": "28726874268427424",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........AU3yPRp64SLO4aJqhN-kMoU5HNYTDplQXbVu0Y"
    }
    
Ошибки: *E_SERVER*   

login
==============================
**POST** Аутентификация пользователя. Предварительно необходимо вызвать команду **getuid** для получения уникального значения и подписать его. В заголовке нужно передать временный JWT токен полученный вместе с getuid. В случае успешного завершения нужно полученный в ответе токен передавать во всех запросах в заголовке *Authorization*.

Запрос

.. code:: 

    POST
    /api/v2/login
    
* *[state]* - идентификатор экосистемы. Если не указан, то берется первая экосистема.
* *[expire]* - время длительности JWT токена в секундах. По умолчанию, 36000.
* *pubkey* - публичный ключ hex.
* *signature* - подпись uid полученного через getuid hex.

Ответ

* *token* - JWT токен.
* *refresh* - JWT токен для продления сессии. Необходимо передавать в команду **refresh**.
* *state* - идентификатор экосистемы.
* *wallet* - идентификатор  кошелька.
* *address* - адрес кошелька в формате XXXX-XXXX-.....-XXXX.

Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........AU3yPRp64SLO4aJqhN-kMoU5HNYT8fNGODp0Y"
        "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........iOiI1Nzk3ODE3NjYwNDM2ODA5MzQ2Iiw"        
        "state":"1",
        "wallet":"12345",
        "address": "1234-....-3424"
    }      

Ошибки: *E_SERVER, E_UNKNOWNUID, E_SIGNATURE, E_STATELOGIN* 

refresh
==============================
**POST** Команда выдает новые токены и продляет сессию пользователя. В случае успешного завершения нужно полученный в ответе токен передавать во всех запросах в заголовке *Authorization*.

Запрос

.. code:: 

    POST
    /api/v2/refresh
    
* *[expire]* - время длительности JWT токена в секундах. По умолчанию, 36000.
* *token* - токен обновления из предыдущего вызова **login** или **refresh**.

Ответ

* *token* - JWT токен.
* *refresh* - JWT токен для продления сессии. Необходимо передавать в команду **refresh**.

Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........AU3yPRp64SLO4aJqhN-kMoU5HNYT8fNGODplQXbVu0Y"
        "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........iOiI1Nzk3ODE3NjYwNDM2ODA5MzQ2Iiw"        
    }      

Ошибки: *E_SERVER, E_TOKEN, E_REFRESHTOKEN* 

signtest
==============================
**POST** Команда подписывает строку указанным приватным ключом. Должна использоваться исключительно для тестирования API, так как в реальной работе приватный ключ не должен передаваться на сервер. Приватный ключ можно взять из директории где запускается сервер.

.. code:: 
    
    POST
    /api/v2/signtest
 
* *private* - hex приватный ключ
* *forsign* - строка для подписи

Ответ

* *signature* - подпись в шестнадцатеричном виде
* *pubkey* - публичный ключ для переданного приватного ключа hex.
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "signature": "0011fa...",
        "pubkey": "324bd7..."
    }      

Ошибки: *E_SERVER* 

********************************************************************************
Служебные команды
********************************************************************************

install
==============================
**POST** Команда производит установку системы. После успешной установки систему требуется перезапустить. 

Запрос

.. code:: 

    POST
    /api/v2/install
 
* *type* - тип установки: **Private-net, nodes, file**.
* *logLevel* - уровень логгирования: **ERROR, DEBUG**.
* *firstLoadBlockchainURL* - адрес для получения блокчейна. Указывается в случае *type* равным *file*.
* *host* - хост для БД PostgreSQL. Например, *localhost*
* *port* - порт для БД PostgreSQL. Например, *5432*
* *db_name* - имя БД PostgreSQL. Например, *mydb*
* *username* - имя пользователя для подключения к БД PostgreSQL. Например, *postgres*
* *password* - пароль для подключения к БД PostgreSQL. Например, *postgres*
* *generate_first_block* - Может быть равен 0 или 1 когда *type* равен *Private-net*. 
* *first_block_dir* - директория где хранится файл *1block* с первым блоком. Указывается когда *generate_first_block* равен 0     и *type* равен *Private-net*.

Ответ

* *success* - true в случае успешного завершения.

Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "success": true
    }      

Ошибки: *E_SERVER, E_INSTALLED, E_DBNIL* 

********************************************************************************
Работа с валютами
********************************************************************************

balance
==============================
**GET** Получить баланс указанного кошелька в текущей экосистеме. 

Запрос

.. code:: 
    
    GET
    /api/v1/balance/{wallet}
    
* *wallet* - Номер кошелька. Может быть представлен в любом формате - int64, uint64, XXXX-...-XXXX. Поиск указанного кошелька осуществляется в экосистеме, в которую вошел пользователь.   
    
Ответ    

* *amount* - cумма в кошельке в минимальных единицах (например, в qAPLA).
* *money* - cумма в кошельке в единицах (например, в APLA).
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "amount": "123450000000000000000",
        "money": "123.45"
    }      

