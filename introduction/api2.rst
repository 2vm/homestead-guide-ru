################################################################################
REST API v2
################################################################################

Черновик команд API v2 для работы с EGAAS. Для работы с REST API v2 необходимо скомпилировать сервер из ветки **gorm_arch** и запускать с параметром командной строки **-v2**.

Вызов команды происходит при обращении к **/api/v2/command/[param]**, где **command** - имя команды, **param** - дополнительный параметр, например, имя изменяемого или получаемого ресурса. Отправлять параметры запросов следует с **Content-Type: x-www-form-urlencoded**. Ответ сервера представлен в JSON формате.

В случае успешного выполнения возвращается статус 200. В случае ошибки, кроме ошибочного статуса возвращается объект JSON c полем **error**, которое содержит текст ошибки. 

********************************************************************************
Аутентификация
********************************************************************************

Для аутентификации используется **JWT токен** http://www.jwt.org. После получения JWT токена необхоимо передавать его при каждом запросе в заголовке: **Authorization: Bearer TOKEN_HERE**. 

getuid
==============================
**GET** Возвращает уникальное значение, которое нужно подписать своим приватным ключом и отправить обратно серверу с помощью команды **login**. На данный момент создается временный JWT токен, который нужно передать в **Authorization** при вызове **login**. Все поля JSON ответа:

expire - если уже есть авторизация, то количество секунд до истечения срока. 
uid - строка для подписи. Если возвращается пустая строка, то значит требуется установка сервера.
token - временный токен для передачи в login.
В случае, когда авторизация не требуется, то возвращаются
state - идентификатор экосистемы.
wallet - идентификатор  кошелька.
address - адрес кошелька в формате XXXX-XXXX-.....-XXXX.

.. code:: 
    
    GET
    /api/v1/getuid
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "uid": "28726874268427424",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........AU3yPRp64SLO4aJqhN-kMoU5HNYT8fNGODplQXbVu0Y"
    }

login
==============================
**POST** Аутентификация пользователя. Предварительно необходимо вызвать команду **getuid** для получения уникального значения и подписать его. В заголовке нужно передать временный JWT токен полученный вместе с getuid. В случае успешного завершения нужно полученный в ответе токен передавать во всех запросах в заголовке *Authorization*.

Запрос

.. code:: 

    POST
    /api/v1/login
   [state] - идентификатор экосистемы. Если не указан, то берется первая экосистема.
   [expire] - время длительности JWT токена в секундах. По умолчанию, 36000.
   pubkey - публичный ключ hex.
   signature - подпись uid полученного через getuid hex.

Ответ

.. code:: 

   token - JWT токен.
   refresh - JWT токен для продления сессии. Необходимо передавать в команду **refresh**.
   state - идентификатор экосистемы.
   wallet - идентификатор  кошелька.
   address - адрес кошелька в формате XXXX-XXXX-.....-XXXX.

Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........AU3yPRp64SLO4aJqhN-kMoU5HNYT8fNGODplQXbVu0Y"
        "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........iOiI1Nzk3ODE3NjYwNDM2ODA5MzQ2Iiw"        
        "state":"1",
        "wallet":"12345",
        "address": "1234-....-3424"
    }      

refresh
==============================
**POST** Команда выдает новые токены и продляет сессию пользователя. В случае успешного завершения нужно полученный в ответе токен передавать во всех запросах в заголовке *Authorization*.

Запрос

.. code:: 

    POST
    /api/v1/refresh
   [expire] - время длительности JWT токена в секундах. По умолчанию, 36000.
   token - токен обновления из предыдущего вызова **login** или **refresh**.

Ответ

.. code:: 

   token - JWT токен.
   refresh - JWT токен для продления сессии. Необходимо передавать в команду **refresh**.

Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........AU3yPRp64SLO4aJqhN-kMoU5HNYT8fNGODplQXbVu0Y"
        "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6I........iOiI1Nzk3ODE3NjYwNDM2ODA5MzQ2Iiw"        
    }      

signtest
==============================
**POST** Команда подписывает строку указанным приватным ключом. Должна использоваться исключительно для тестирования API, так как в реальной работе приватный ключ не должен передаваться на сервер. Возвращается параметр *signature* - подпись в шестнадцатеричном виде и *pubkey* - публичный ключ для данного приватного ключа. Приватный ключ можно взять из директории где запускается сервер.

.. code:: 
    
    POST
    /api/v1/signtest
    private: hex приватный ключ
    forsign: строка для подписи
    pubkey: hex публичный ключ
    
Вариант ответа

.. code:: 
    
    200 (OK)
    Content-Type: application/json
    {
        "signature": "0011fa...",
        "pubkey": "324bd7..."
    }      

