################################################################################
Описание exchange api
################################################################################

Данное API позволяет по запросу создавать приватные ключи (кошельки) для получения средств и затем отправлять полученные средства на другие кошельки. Все созданные приватные ключи хранятся в зашифрованном виде.

********************************************************************************
Параметры при запуске
********************************************************************************

Для того, чтобы работать с данным API, при запуске EGAAS необходимо указывать следующие параметры.

**-boltDir** - директория, где будет создан и хранится файл с приватными ключами. Для хранения ключей используется NoSQL база данных BoltDB. Файл имеет имя *exchangeapi.db*. Если параметр не указан, то файл создастся в текущей дериктории.

.. code:: 
      
      -boltDir=/home/temp

**-boltPsw** - пароль для шифрования приватных ключей при записи в БД. Если при запуске пароль не был указан, то API работать не будет. Пароль, указанный при первом запуске, должен указываться и при последующих запусках. Пароль нигде не сохраняется, поэтому не забудьте его. Если вы укажете неверный пароль или слово *console* в качестве пароля, то вам будет предложено ввести пароль в консоле после запуска EGAAS. Также, если пароль уже был установлен, но не указан в параметре командной строки, он будет запрошен в консоле.

.. code:: 

      -boltPsw=mypass344

**-apiToken** - данный параметр определяет token, который нужно будет передавать при запросе к API. Указанный token будет сохранен и в следующих запусках, его можно не указывать. Если этот параметр не был ни разу указан, то вызывать команды API можно и без указания параметра token. Если будет необходимо сменить token, то нужно запустить EGAAS с новым значением в данном параметре.

.. code:: 

      -apiToken=qweuytwuy347834

********************************************************************************
API запросы
********************************************************************************

Ответы на API запросы имеют формат JSON и все имеют поле **error**. Если оно пусто, то выполнение запроса прошло без ошибок. В противном случае, там содержится текст произошедшей ошибки.

/exchangeapi/newkey
==============================
Команда генерирует приватный ключ, записывает его в файл ключей и возвращает публичный ключ и адреса кошелька.
Например,

*/exchangeapi/newkey?token=qweuytwuy347834*

Пример ответа:

.. code:: 

   {"error":"", 
    "public":"b7880fa40779d673e7....238def72881d6c2b6c60ffcc2ec7f050141d", 
    "address":"0773-5161-7272-4133-0241", 
    "wallet_id":7735161727241330241
    }

/exchangeapi/send?sender=...&recipient=...&amount=...
==============================
Команда отправляет деньги с кошелька (**sender**) из БД на указанный кошелек (**recipient**). Кошельки могут указываться в любом формате - *XXXX-....-XXXX, int64, uint64*. Следует заметить, что команда только отправляет транзакцию, но не дожидается подтверждения, что деньги перечислены. Величина переводимой суммы (**amount**) должна указываться в *qEGS*. Возвращается хэш транзакции в поле **txhash**.

Например,

*/exchangeapi/send?sender=1693-7869-8202-2463-0602&recipient=-3521799150320731671&amount=999000000000000&token=mytoken*

Пример ответа: 

.. code:: 

     {"txhash": "734fa..89ab5",
     "error":""}


/exchangeapi/balance?wallet=....
==============================
Команда возвращает баланс любого кошелька.

Например,

*/exchangeapi/balance?wallet=0773-5161-7272-4133-0241&token=mytoken*

Пример ответа: 

.. code:: 

     {"error":"","amount":"99992318000000000000","egs":"99.992318"}

/exchangeapi/history?wallet=...&count=...
==============================
Команда возвращает последнюю историю движений средств в указанном кошельке. **count** - является необязательным параметром и определяет количество возвращаемых записей (может возвращаться на 1 больше). По умолчанию, будет возвращаться 50 записей, максимальное количество 200.

Ответ

* *error* - текст ошибки
* *history* - массив данных об изменении средств

  * *block_id* - идентификатор блока
  * *dif* - изменение счета
  * *txhash* - хэш транзакции
  * *amount* - текущий баланс в qEGS
  * *egs* - текущий баланс в EGS
  * *time* - время транзакции

Например,

*/exchangeapi/history?wallet=1693-7869-8202-2463-0602&count=10&token=mytoken*

Пример ответа: 

.. code:: 

    {"error":"",
    "history":[{"block_id":"118855","dif":"-0.001",
    "amount":"99992318000000000000","egs":"99.992318","time":"03.05.2017 10:48:14"},
    {"block_id":"118855","dif":"-0.001999","amount":"99993318000000000000","egs":"99.993318",
    "time":"03.05.2017 10:48:14"},
    {"block_id":"112283","dif":"-0.001","amount":"99995317000000000000","egs":"99.995317",
    "time":"02.05.2017 18:28:24"}]}

/exchangeapi/txstatus?hash=...
==============================

Команда возвращает информацию по транзакции с хэшем указанным в поле *hash*. Если *block_id* равен "0" и в поле *error* пустая строка, то значиттранзакция еще не попала в блок.

Ответ

* *block_id* - номер блока
* *txhash* - хэш транзакции
* *amount* - сумма перевода в qAPL
* *egs* - сумма перевода в APL
* *time* - время транзакции
* *sender* - идентификатор отправителя
* *recipient* - идентификатор получателя
* *sender_address* - адрес отправителя в формате XXXX-...-XXXX
* *recipient_address* - адрес получателя в формате XXXX-...-XXXX 
* *confirmations* - количество блоков после данного блока
* *error* - сообщение об ошибке

Например,

*/exchangeapi/txstatus?hash=ca378ca44c388b79fba6d8643c5e8935*

Пример ответа:

.. code:: 

   {
    "block_id": "18111",
    "confirmations": "3618",
    "txhash": "ca378ca44c388b79fba6d8643c5e8935",
    "amount": "46000000000000",
    "egs": "0.000046",
    "time": "1505306953",
    "sender": "7480871936035188899",
    "recipient": "-2411392676761618411",
    "sender_address": "0748-0871-9360-3518-8899",
    "recipient_address": "1603-5351-3969-4793-3205",
    "error": ""
   }
