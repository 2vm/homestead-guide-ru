################################################################################
Шаблонизатор страниц v2
################################################################################
********************************************************************************
Отличия от первой версии
********************************************************************************
В связи с переходом общения интерфейсной части только посредством API и выделения интерфейса на новую платформу (**React**) потребовалось изменить результат работы шаблонизатора. Также в новой версии нужно было учесть пожелания и замечания, который возникли при работе с первой версией шаблонизатора. 
В отличии от первой версии, вторая версия шаблонизатора выдает не готовую HTML страницу, а промежуточное дерево, которое представляет собой HTML тэги расположенные в виде дерева в соответствии с тем, как они описаны в шаблонизаторе. Для получения этого дерева для страниц и меню необходимо использовать команду content из API v2. Кроме этого, для тестирования, можно отправлять POST запрос в **api/v2/content** c параметром *template*, который содержит шаблон для обработки.
Следует заметить, что в новой версии мы отказались от двух типров функций () и {} и оставили только вызовы (), но кроме этого для всех вызовов сделали возможность указывать параметры по их именам. Об этом подробнее будет написано ниже. Сам список функций тоже будет переработан.

********************************************************************************
Общее описание функций
********************************************************************************
Типы функций
==============================
Шаблоны страниц приложений создаются с помощью набора функций, который можно рассматривать как специализированный язык для создания интерфейсов приложений APLA. Функции можно разделить на несколько групп по типу выполняемых операций:

* получение значений из базы данных;
* оперирование с форматами и значениями переменных;
* представление данных в виде таблиц и диаграмм;
* построение форм с необходимым набором полей для ввода данных контрактов;
* вывод элементов навигации и вызова контрактов;
* создание элементов HTML разметки страницы – различных контейнеров с возможностью указания css классов;
* реализация условного вывода фрагментов шаблонов страниц; 
* создание многоуровневого меню.

Форматы функций
==============================
Язык построения шаблонов страниц по сути явяляется функциональным языком, где вы вызывает функции в виде FuncName(parameters) и причем функции могут вкладываться друг в друга. Параметры можно не заключать в кавычки.

* *Text MyFunc(parameter number 1, parameter number 2) another text.*

Если параметр содержит запятую, то тогда его нужно заключить в обратные или двойные кавычки. Также кавычки нужно использовать если в параметре имеется непарная закрывающая скобка.

* *MyFunc("parameter number 1, the second part of first paremeter")*
* *MyFunc(`parameter number 1, the second part of first paremeter`)*

Если вы заключили параметр в кавычки, но там также используются кавычки, то можно использовать разные кавычки или дублировать их в тексте.

* *MyFunc("parameter number 1, ""the second part of first"" paremeter")*
* *MyFunc(`parameter number 1, "the second part of first" paremeter`)*

Например,

.. code:: js

      FuncName( string 1, string 2, "Text, text")

.. code:: js

      FuncName{ ParamName1: string 1, ParamName2: string 2, ParamName3: "Text, text" }
