################################################################################
Встроенные функции для использования в контрактах
################################################################################

Ниже перечислены готовые функции, которые можно использовать в контрактах. При генерации ошибки в любой из функции, контракт также прекратит свою работу и возвратит данную ошибку. Поэтому функции не возвращают ошибок, так как все

**AddressToID(input string) int**

Функция преобразует строковое представление адреса в виде числа или в формате 1234-...-7893 в целое число.

* *input* - адрес в виде строки.

.. code:: js
    
    myid = AddressToId("34786387692034")


**CallContract(name string, params map)**

Данная функция вызывает указанный контракт. В массиве с параметрами должны быть перечислены все поля, которые указаны в **data** у контракта.

* *name* - имя вызываемого контракта.
* *params* - ассоциативный массив с входящими параметрами для контракта.

.. code:: js

    var par map
    par["Name"] = "My Name"
    CallContract("MyContract", par)

**ContractAccess(name string) bool**

Данная функция проверяет, имеет ли текущий выполняемый контракт указанное имя. Как правило используется в различных условиях для проверки доступа к таблицам в базе данных. То есть можно разрешить доступ к таблице только из указанного контракта.

* *name* - имя контракта.

.. code:: js

    ContractAccess("MyContract")  // В поле Conditions


**DBAmount(tblname string, column string, id int) money**

Функция возвращет денежное значение поля **amount** у указанной записи.

* *tblname* - имя таблицы в базе данных.
* *column* - имя столбца, по которой будет идти поиск записи.
* *id* - значение для поиска записи, выборка *column=id*.

.. code:: js

    mymoney = DBAmount("dlt_wallets"), "wallet_id", $wallet)


**DBGetList(tblname string, name string, offset int, limit int, order string, where string, params ...) array**

Функция возвращает список значений одной колонки у всех полученных записей по указанным условиям.

* *tblname* - имя таблицы в базе данных.
* *name* - имя столбца, из которого будут браться значения.
* *offset* - смещение для выборки записей.
* *limit* - количество получаемых записей. Укажите -1, ограничение не нужно.
* *order* - сортировка. Может быть пустой строкой.
* *where* - условия для запроса. Имена полей должны быть слева в сравнениях. Для подстановки параметров нужно использовать **?**.
* *params* - параметры, которые будут подставляться в условие для запроса.

.. code:: js

    var ret array
    ret = DBGetList(Table("mytable"), "name", 0, -1, "", "idval > ? and idval <= ? and company=?", 
                     10, 200, "My company")

**DBInsert(tblname string, params string, val ...) int**

Функция вставляет запись в указанную таблицу. Функция возвращает **id**  вставленной записи.

* *tblname* - имя таблицы в базе данных.
* *params* - имена колонок, в которые будут записаны указанные далее значения. Перечисляются через запятую.
* *val* - значения для указанных столбцов в параметре *params*. Могут иметь строковый или числовой тип.

.. code:: js

    DBInsert(Table("mytable"), "name,amount", "John Dow", 100)

**DBInt(tblname string, name string, id int) int**

Функция возвращает числовое значение из таблицы базы данных.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *id* - идентификатор поля **id** записи, у которой будет взято значение.

.. code:: js

    var val int
    val = DBInt(Table("mytable"), "counter", 1)

**DBIntExt(tblname string, name string, val (int|string), idname string) int**

Функция возвращает числовое значение из таблицы базы данных с поиском записи по указанному полю и значениею.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *val* - значение, по которому будет искаться запись.
* *idname* - имя колонки, по которой будет искаться запись. Таблица должна иметь индекс по данной колонке.

.. code:: js

    var val int
    val = DBIntExt(Table("mytable"), "balance", "wallet_id", $wallet )

**DBIntWhere(tblname string, name string, where string, params ...) int**

Функция возвращает числовое значение из таблицы базы данных с поиском записи по указанным условиям.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *where* - условия для запроса. Имена полей должны быть слева в сравнениях. Для подстановки параметров нужно использовать **?**.
* *params* - параметры, которые будут подставляться в условие для запроса.

.. code:: js

    var val int
    val = DBIntWhere(Table("mytable"), "counter",  "idgroup = ? and statue=?", mygroup, 1 )

**DBString(tblname string, name string, id int) string**

Функция возвращает строковое значение из таблицы базы данных.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *id* - идентификатор поля **id** записи, у которой будет взято значение.

.. code:: js

    var val string
    val = DBString(Table("mytable"), "name", AddressToId(person))

**DBStringExt(tblname string, name string, val (int|string), idname string) string**

Функция возвращает строковое значение из таблицы базы данных с поиском записи по указанному полю и значениею.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *val* - значение, по которому будет искаться запись.
* *idname* - имя колонки, по которой будет искаться запись. Таблица должна иметь индекс по данной колонке.

.. code:: js

    var val string
    val = DBStringExt(Table("mytable"), "address", "My Company", "company" )

**DBStringWhere(tblname string, name string, where string, params ...) string**

Функция возвращает строковое значение из таблицы базы данных с поиском записи по указанным условиям.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *where* - условия для запроса. Имена полей должны быть слева в сравнениях. Для подстановки параметров нужно использовать **?**.
* *params* - параметры, которые будут подставляться в условие для запроса.

.. code:: js

    var val string
    val = DBStringWhere(Table("mytable"), "address",  "idgroup = ? and company=?", 
           mygroup, "My company" )

**DBTransfer(tblname, columns string, idFrom int, idTo int, amount money)**

Функция переводит указанные средства из одного кошелька в другой. 

* *tblname* - имя таблицы в базе данных, где хранятся средства.
* *columns* - имя столбца в котором будут сниматься и начисляться средства.
* *idFrom* - адрес кошелька откуда сниматься деньги.
* *idTo* - адрес кошелька куда будут переведены деньги. По умолчанию, считается, что кошельки хранятся в столбце с именем **id**. Если кошельки записаны в колонке с другим именем, то укажите это имя через запятую в columns. Например, *amount,wallet_id*.
* *amount* - величина переводимых средств.

.. code:: js

    DBTransfer(Table("mytable"), "amount", fromId, AddressToId(toaddr), Money(10000))
 
**DBUpdate(tblname string, id int, params string, val...)**
 
Функция обновляет указанные столбцы в таблице в записи с данным **id**.
 
* *tblname* - имя таблицы в базе данных.
* *id* - идентификатор id изменяемой записи.
* *params* - имена колонок, в которые будут записаны указанные далее значения. Перечисляются через запятую.
* *val* - значения для указанных столбцов в параметре *params*. Могут иметь строковый или числовой тип.

.. code:: js

    DBUpdate(Table("mytable"), myid, "name,amount", "John Dow", 100)
 
**DBUpdateWhere(tblname string, column string, value (int|string), params string, val ...)**

Функция обновляет указанные столбцы в таблице в записи, у которой определенная колонка имеет данной значение. Таблица должна иметь индекс по указанному столбцу.
 
* *tblname* - имя таблицы в базе данных.
* *column* - имя столбца, по которой будет идти поиск записи.
* *value* - значение для поиска записи по значению в столбце.
* *params* - имена колонок, в которые будут записаны указанные далее значения. Перечисляются через запятую.
* *val* - значения для указанных столбцов в параметре *params*. Могут иметь строковый или числовой тип.

.. code:: js

    DBUpdateWhere(Table("mytable"), "address", addr, "name,amount", "John Dow", 100)

**Float(val int|string) float**

Функция преобразует целое число **int** или **string** в число с плавающей точкой.

* *val* - целое число или строка.

.. code:: js

    val = Float("567.989") + Float(232)

**HexToBytes(hexdata string) bytes**

Функция преобразует строку с шестнадцатеричной кодировкой в последовательность байт с типом **bytes**.

* *hexdata* - входящая строка, содержащая шестнадцатеричную запись.

.. code:: js

    var val bytes
    val = HexToBytes("34fe4501a4d80094")

**IdToAddress(id int) string**

Функция преобразует числовое значение адреса в строку вида 1234-...-6789.

* *id* - адрес кошелька в виде числа.

.. code:: js

    out = IdToAddress(-37763499007332)

**Int(val string) int**

Функция преобразует строку в целое число.

* *val* - строка содержащая число.

.. code:: js

    mystr = "-37763499007332"
    val = Int(mystr)

**IsGovAccount(wallet int) bool**

Данная функция проверяет, является ли указанный адрес владельцем (управляющим) текущего государства.  Как правило используется в различных условиях для проверки доступа к таблицам в базе данных. То есть можно разрешить доступ к таблице только государству.

* *wallet* - адрес.

.. code:: js

    IsGovAccount($citizen)  // В поле Conditions

**Len(val array) int**

Функция возвращает количество элементов в указанном массиве.

* *val* - массив, должен иметь тип **array**.

.. code:: js

    if Len(mylist) == 0 {
      ...
    }

**Money(val string|float|int) money**

Функция преобразует число или строку в денежный тип **money**.

* *val* - значение для преобразования. Может иметь тип **string**, **int**, **float**.

.. code:: js

    var amount money
    amount = Money(347464.123)

**PubToID(hexkey string) int**

Функция возвращает адрес по публичному ключу в шестнадцатеричной кодировке.

* *hexkey* - публичный ключ в шестнадацатеричном виде.

.. code:: js

    var wallet int
    wallet = PubToID("fa5e78.....34abd6")

**Sha256(val string) string**

Функция возвращает хэш SHA256 от указанной строки.

* *val* - входящая строка, у которой нужно вычислить хэш **Sha256**.

.. code:: js

    var sha string
    sha = Sha256("Test message")

**Sprintf(pattern string, val ...) string**

Функция формирует строку на основе указанного шаблона и параметров, можно использовать %d (число), %s (строка), %f (float), %v (для любых типов).

* *pattern* - шаблон для формирования строки.

.. code:: js

    out = Sprintf("%s=%d", mypar, 6448)

**StateValue(name string) string**

Функция возвращает значение указанного параметра из настроек государства (таблица state_parameters).

* *name* - имя получаемого параметра.

.. code:: js

    Println( StateValue("gov_account")) 

**Str(val int|float) string**

Функция преобразует целое число **int** или **float** в строку.

* *val* - целое или число с плавающей точкой.

.. code:: js

    myfloat = 5.678
    val = Str(myfloat)

**Table(tblname) string**

Функция возвращает полное имя таблицы в зависимости от текущего государства, которое определено при вызове контракта. По сути, она добавляет слева идентификатор государства и подчерк. Если не указывать полные имена таблиц, то такие контракты можно использовать в разных государствах, так как они не будут зависеть от идентифкаторов государств.

* *tblname* - имя таблицы в базе данных, которое необзходимо преобразовать в полное имя.

.. code:: js

    Println( Table("citizens")) // may be 1_citizens or 2_citizens etc.

**UpdateContract(name string, value string, conditions string)**

Функция обновляет указанный контракт. 

* *name* - имя контракта.
* *value* - исходный текст контракта.
* *conditions* - права доступа на изменениe контракта.

.. code:: js

    UpdateContract("MyContract", source, "IsGovAccount($citizen)")

**UpdateMenu(name string, value string, conditions string)**

Функция обновляет указанное меню. 

* *name* - имя обновляемого меню.
* *value* - текст меню с функциями шаблонизатора.
* *conditions* - права доступа на изменениe меню.

.. code:: js

    UpdateMenu("main_menu", mymenu, "IsGovAccount($citizen)")

**UpdatePage(name string, value string, menu string, conditions string)**

Функция обновляет указанную страницу. 

* *name* - имя обновляемой страницы.
* *value* - текст страницы с функциями шаблонизатора.
* *menu* - имя привязываемого меню.
* *conditions* - права доступа на изменениe страницы.

.. code:: js

    UpdatePage("default_dashboard",mypage, "main_menu", "IsGovAccount($citizen)")

**UpdateParam(name string, value string, conditions string)**

Функция обновляет параметр государства в таблице state_parameters. 

* *name* - имя параметра.
* *value* - значение параметра.
* *conditions* - права доступа на изменениe параметра.

.. code:: js

    UpdateParam("myparam", "new value", "IsGovAccount($citizen)")


