################################################################################
Встроенные функции для использования в контрактах
################################################################################

Ниже перечислены готовые функции, которые можно использовать в контрактах. При генерации ошибки в любой из функции, контракт также прекратит свою работу и возвратит данную ошибку. Поэтому функции не возвращают ошибок, так как все

**CallContract(name string, params map)**

Данная функция вызывает указанный контракт. В массиве с параметрами должны быть перечислены все поля, которые указаны в **data** у контракта.

* *name* - имя вызываемого контракта.
* *params* - ассоциативный массив с входящими параметрами для контракта.

.. code:: js

    var par map
    par["Name"] = "My Name"
    CallContract("MyContract", par)

**DBGetList(tblname string, name string, offset int, limit int, order string, where string, params ...) array**

Функция возвращает список значений одной колонки у всех полученных записей по указанным условиям.

* *tblname* - имя таблицы в базе данных.
* *name* - имя столбца, из которого будут браться значения.
* *offset* - смещение для выборки записей.
* *limit* - количество получаемых записей. Укажите -1, ограничение не нужно.
* *order* - сортировка. Может быть пустой строкой.
* *where* - условия для запроса. Имена полей должны быть слева в сравнениях. Для подстановки параметров нужно использовать **?**.
* *params* - параметры, которые будут подставляться в условие для запроса.

.. code:: js

    var ret array
    ret = DBGetList(Table("mytable"), "name", 0, -1, "", "idval > ? and idval <= ? and company=?", 
                     10, 200, "My company")

**DBInsert(tblname string, params string, val ...) int**

Функция вставляет запись в указанную таблицу. Функция возвращает **id**  вставленной записи.

* *tblname* - имя таблицы в базе данных.
* *params* - имена колонок, в которые будут записаны указанные далее значения. Перечисляются через запятую.
* *val* - значения для указанных столбцов в параметре *params*. Могут иметь строковый или числовой тип.

.. code:: js

    DBInsert(Table("mytable"), "name,amount", "John Dow", 100)

**DBInt(tblname string, name string, id int) int**

Функция возвращает числовое значение из таблицы базы данных.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *id* - идентификатор поля **id** записи, у которой будет взято значение.

.. code:: js

    var val int
    val = DBInt(Table("mytable"), "counter", 1)

**DBString(tblname string, name string, id int) string**

Функция возвращает строковое значение из таблицы базы данных.

* *tblname* - имя таблицы в базе данных.
* *name* - имя колонки, значение которой будет возвращено.
* *id* - идентификатор поля **id** записи, у которой будет взято значение.

.. code:: js

    var val string
    val = DBString(Table("mytable"), "name", AddressToId(person))

**DBTransfer(tblname, columns string, idFrom int, idTo int, amount money)**

Функция переводит указанные средства из одного кошелька в другой. 

* *tblname* - имя таблицы в базе данных, где хранятся средства.
* *columns* - имя столбца в котором будут сниматься и начисляться средства.
* *idFrom* - адрес кошелька откуда сниматься деньги.
* *idTo* - адрес кошелька куда будут переведены деньги. По умолчанию, считается, что кошельки хранятся в столбце с именем **id**. Если кошельки записаны в колонке с другим именем, то укажите это имя через запятую в columns. Например, *amount,wallet_id*.
* *amount* - величина переводимых средств.

.. code:: js

    DBTransfer(Table("mytable"), "amount", fromId, AddressToId(toaddr), Money(10000))
 
**DBUpdate(tblname string, id int, params string, val...)**
 
Функция обновляет указанные столбцы в таблице в записи с данным **id**.
 
* *tblname* - имя таблицы в базе данных.
* *id* - идентификатор id изменяемой записи.
* *params* - имена колонок, в которые будут записаны указанные далее значения. Перечисляются через запятую.
* *val* - значения для указанных столбцов в параметре *params*. Могут иметь строковый или числовой тип.

.. code:: js

    DBUpdate(Table("mytable"), myid, "name,amount", "John Dow", 100)
 
**DBUpdateWhere(tblname string, column string, value (int|string), params string, val ...)**

Функция обновляет указанные столбцы в таблице в записи, у которой определенная колонка имеет данной значение. Таблица должна иметь индекс по указанному столбцу.
 
* *tblname* - имя таблицы в базе данных.
* *column* - имя столбца, по которой будет идти поиск записи.
* *value* - значение для поиска записи по значению в столбце.
* *params* - имена колонок, в которые будут записаны указанные далее значения. Перечисляются через запятую.
* *val* - значения для указанных столбцов в параметре *params*. Могут иметь строковый или числовой тип.

.. code:: js

    DBUpdateWhere(Table("mytable"), "address", addr, "name,amount", "John Dow", 100)


