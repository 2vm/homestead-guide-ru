################################################################################
Язык написания контрактов
################################################################################

Целью создания специального языка для написания контрактов было желание сделать простой скриптовый язык с быстрой компиляцией в байт-код. При этом все контракты должны быть в едином пространстве и "на лету" добавлялись бы новые контракты. Язык должен поддерживать базовые типы, переменные, функции, стандартный набор операторов и специальную обработку ошибок при которой контракт прекращает работу при возникновении ошибки в любой вызванной функции. 

Так как контракты являются общими для всех, то все они компилируются в байт-код, и он хранится в памяти в одном месте. При вызове контракта, происходит создание изолированного стэка с входящими данными, с которым и работает виртуальная машина выполняя байт-код. Таким образом, на одном и том же байт-коде может одновременно выполнятся множество процессов, которые не будут влиять друг на друга, так как каждый процесс имеет свой собственный стэк и набор переменные.

### Типы

### Обработка ошибок

Когда выполняется контракт, ошибка в любой из функции должна приводить к прекращению работы контракта и возврату данной ошибки. Если требовать постоянной проверки кодов возврата, то это приведет к излишним проверкам, а игнорирование таких проверок при сбое будет приводит к неверной работе. Поэтому все ошибки обрабатываются автоматически, достаточно вызвать команду генерации ошибки и текущий контракт закончит работу и вернет данную ошибку.  

Существует три команды для прекращения работы контракта: **error, warning, info**. По сути они все генерируют ошибку, но ошибка будет возвращаться с тремя различными типами: критическая ошибка, предупреждение, и информативная ошибка. Соответственно, в браузере можно выводить каждую из ошибок в разном оформлении и с разной дополнительной информацией. Например,

.. code:: js

  if fuel == 0 {
        error "fuel cannot be zero!"
  }
  if money < limit {
        warning Sprintf("You don't have enough money: %v < %v", money, limit)
  }
  if idexist > 0 {
        info "You have been already registered"
  }

